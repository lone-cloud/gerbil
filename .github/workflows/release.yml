name: Release

permissions:
  contents: write
  actions: read

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Node.js version from .nvmrc
        id: versions
        shell: bash
        run: |
          NODE_VERSION=$(cat .nvmrc)
          echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Using Node.js $NODE_VERSION from .nvmrc"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.versions.outputs.node-version }}

      - name: Enable Corepack and prepare Yarn
        run: |
          corepack enable
          corepack prepare yarn@4.9.4 --activate

      - name: Install dependencies
        run: yarn

      - name: Run type check
        run: yarn compile

      - name: Run linter
        run: yarn lint

      - name: Build Electron app
        run: yarn package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: |
            release/*.dmg
            release/latest-mac.yml

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: |
            release/*.exe
            release/latest.yml

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: |
            release/*.AppImage
            release/latest-linux.yml

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    outputs:
      is_prerelease: ${{ steps.release_type.outputs.is_prerelease }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/**/*

      - name: Determine tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${{ steps.tag.outputs.tag }}" =~ -alpha|-beta|-rc ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "ðŸ“‹ This will be marked as a pre-release"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "ðŸ“‹ This will be marked as a full release"
          fi

      - name: Create Release
        run: |
          if [ "${{ steps.release_type.outputs.is_prerelease }}" = "true" ]; then
            gh release create ${{ steps.tag.outputs.tag }} \
              --title "Gerbil ${{ steps.tag.outputs.tag }}" \
              --generate-notes \
              --prerelease
          else
            gh release create ${{ steps.tag.outputs.tag }} \
              --title "Gerbil ${{ steps.tag.outputs.tag }}" \
              --generate-notes
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS Release Asset
        run: |
          for file in artifacts/macos-release/*.dmg; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              gh release upload ${{ steps.tag.outputs.tag }} "$file" --clobber
            fi
          done
          if [ -f "artifacts/macos-release/latest-mac.yml" ]; then
            gh release upload ${{ steps.tag.outputs.tag }} "artifacts/macos-release/latest-mac.yml" --clobber
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Release Asset
        run: |
          for file in artifacts/windows-release/*.exe; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              gh release upload ${{ steps.tag.outputs.tag }} "$file" --clobber
            fi
          done
          if [ -f "artifacts/windows-release/latest.yml" ]; then
            gh release upload ${{ steps.tag.outputs.tag }} "artifacts/windows-release/latest.yml" --clobber
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux Release Asset
        run: |
          for file in artifacts/linux-release/*.AppImage; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              gh release upload ${{ steps.tag.outputs.tag }} "$file" --clobber
            fi
          done
          if [ -f "artifacts/linux-release/latest-linux.yml" ]; then
            gh release upload ${{ steps.tag.outputs.tag }} "artifacts/linux-release/latest-linux.yml" --clobber
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload additional assets for AUR
        run: |
          # Upload desktop file and LICENSE as release assets for AUR consistency
          gh release upload ${{ steps.tag.outputs.tag }} "assets/gerbil.desktop" --clobber
          gh release upload ${{ steps.tag.outputs.tag }} "LICENSE" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  aur-release:
    needs: release
    if: needs.release.outputs.is_prerelease != 'true'
    uses: ./.github/workflows/aur-release.yml
    with:
      tag: ${{ github.ref_name }}
      pkgrel: '1'
    secrets: inherit
